import init from "../../app/src/edom";
import { Data } from "front-db"

import { Tween, easings } from '@smoovy/tween';

import TWEEN from "@tweenjs/tween.js"

import anime from "animejs"



const c = function (query: string) {
  return document.childs(query)
}

declare let global: any;

window.addEventListener("load", () => {
  init().then(() => {
    let elem = c("#test")[0]
    let svg = c("svg path")[0]
    global.elem = elem;
    console.log(elem);

    window.on("scroll", () => {
      let t = window.scrollY;
      //console.log(t);
      

      guide.val = t
    });


    let guide = new Data(1000);

    
    //elem.anim({translateY: 1500}, {end: 2000}, guide)
    
    // setTimeout(() => {
    //   //@ts-ignore
    //   svg.anim([
    //     //@ts-ignore
    //     {offset: 0, d: "path('M211.313,236.242C211.313,236.242,68.853,0.073,68.853,0.073C68.853,0.073,0,0.073,0,0.073C0,0.073,168.129,278.76,168.129,278.76C168.129,278.76,185.629,278.76,185.629,278.76C185.629,278.76,211.313,236.242,211.313,236.242M433.478,0C433.478,0,364.535,0,364.535,0C364.535,0,196.327,278.833,196.327,278.833C196.327,278.833,265.18,278.833,265.18,278.833C265.18,278.833,433.478,0,433.478,0M222.069,357.189C222.069,357.189,364.6,593.358,364.6,593.358C364.6,593.358,433.45300000000003,593.358,433.45300000000003,593.358C433.45300000000003,593.358,265.25300000000004,314.67199999999997,265.25300000000004,314.67199999999997C265.25300000000004,314.67199999999997,247.817,314.67199999999997,247.817,314.67199999999997C247.817,314.67199999999997,222.069,357.189,222.069,357.189M0,593.431C0,593.431,68.853,593.431,68.853,593.431C68.853,593.431,237.151,314.6,237.151,314.6C237.151,314.6,168.264,314.6,168.264,314.6C168.264,314.6,0,593.431,0,593.431')"},
    //     //@ts-ignore
    //     {d: "path('M 218.172 299.236 C 218.172 299.236 396.895 0 396.895 0 C 396.895 0 318.2 0 318.2 0 C 318.2 0 138.631 299.236 138.631 299.236 C 138.631 299.236 216.69 298.625 216.69 298.625 C 216.69 298.625 218.172 299.236 218.172 299.236 M 465.808 0 C 465.808 0 396.895 0 396.895 0 C 396.895 0 213.62 299.236 213.62 299.236 C 213.62 299.236 287.25 297.185 287.25 297.185 C 287.25 297.185 465.808 0 465.808 0 M 216.69 294.742 C 216.69 294.742 34.985 593.1 34.985 593.1 C 34.985 593.1 109.514 593.1 109.514 593.1 C 109.514 593.1 288.5 295.089 288.5 295.089 C 288.5 295.089 254.489 297.177 254.489 297.177 C 254.489 297.177 216.69 294.742 216.69 294.742 M -38.127 593.1 C -38.127 593.1 34.985 593.1 34.985 593.1 C 34.985 593.1 220.71499999999997 295.091 220.71499999999997 295.091 C 220.71499999999997 295.091 139.62699999999998 297.25 139.62699999999998 297.25 C 139.62699999999998 297.25 -38.127 593.1 -38.127 593.1')"},
        
    //   ], {duration: 250, fill: "both"})
    // }, 1000)

    var parse = require('parse-svg-path')
    var abs = require('abs-svg-path')
    var normalize = require('normalize-svg-path')
    
    let input1 = "M211.313,236.242C211.313,236.242,68.853,0.073,68.853,0.073C68.853,0.073,0,0.073,0,0.073C0,0.073,168.129,278.76,168.129,278.76C168.129,278.76,185.629,278.76,185.629,278.76C185.629,278.76,211.313,236.242,211.313,236.242M433.478,0C433.478,0,364.535,0,364.535,0C364.535,0,196.327,278.833,196.327,278.833C196.327,278.833,265.18,278.833,265.18,278.833C265.18,278.833,433.478,0,433.478,0M222.069,357.189C222.069,357.189,364.6,593.358,364.6,593.358C364.6,593.358,433.45300000000003,593.358,433.45300000000003,593.358C433.45300000000003,593.358,265.25300000000004,314.67199999999997,265.25300000000004,314.67199999999997C265.25300000000004,314.67199999999997,247.817,314.67199999999997,247.817,314.67199999999997C247.817,314.67199999999997,222.069,357.189,222.069,357.189M0,593.431C0,593.431,68.853,593.431,68.853,593.431C68.853,593.431,237.151,314.6,237.151,314.6C237.151,314.6,168.264,314.6,168.264,314.6C168.264,314.6,0,593.431,0,593.431"
    let input2 = "M 218.172 299.236 C 218.172 299.236 396.895 0 396.895 0 C 396.895 0 318.2 0 318.2 0 C 318.2 0 138.631 299.236 138.631 299.236 C 138.631 299.236 216.69 298.625 216.69 298.625 C 216.69 298.625 218.172 299.236 218.172 299.236 M 465.808 0 C 465.808 0 396.895 0 396.895 0 C 396.895 0 213.62 299.236 213.62 299.236 C 213.62 299.236 287.25 297.185 287.25 297.185 C 287.25 297.185 465.808 0 465.808 0 M 216.69 294.742 C 216.69 294.742 34.985 593.1 34.985 593.1 C 34.985 593.1 109.514 593.1 109.514 593.1 C 109.514 593.1 288.5 295.089 288.5 295.089 C 288.5 295.089 254.489 297.177 254.489 297.177 C 254.489 297.177 216.69 294.742 216.69 294.742 M -38.127 593.1 C -38.127 593.1 34.985 593.1 34.985 593.1 C 34.985 593.1 220.71499999999997 295.091 220.71499999999997 295.091 C 220.71499999999997 295.091 139.62699999999998 297.25 139.62699999999998 297.25 C 139.62699999999998 297.25 -38.127 593.1 -38.127 593.1"
    
 
    let segments1: (string | number)[][] = normalize(abs(parse(input1)))
    let segments2: (string | number)[][] = normalize(abs(parse(input2)))
    

    
    // anime({
    //   targets: 'svg path',
    //   d: 'M 30,30 A 20,20 0,0,1 50,30 A 20,20 0,0,1 90,30 Q 90,60 50,90 Q 10,60 10,30 z',
    //   duration: 2000,
    //   loop: true
    // });

    let span = c("span")[0]
  
    setTimeout(() => {
      console.log("2");
      segments1 = JSON.parse(JSON.stringify(segments1))
      segments2 = JSON.parse(JSON.stringify(segments2))
      
      for (let i = 0; i < segments1.length; i++) {
        let start = segments1[i]
        let end = segments2[i]
        Tween.fromTo(
          start,
          end,
          {
            easing: easings.Linear.none,
            duration: 1000,
            on: {
              update: (e) => {
                //@ts-ignore
                span.innerText = i + "     " + start.join()
              }
            }
          }
        )
      }
    }, 3000)






    function loop() {
      requestAnimationFrame(loop)
      TWEEN.update()
    }

    loop()



    setTimeout(() => {
      console.log("1"); 
      let s1 = JSON.parse(JSON.stringify(segments1))
      let s2 = JSON.parse(JSON.stringify(segments2))
      
      
      for (let i = 0; i < s1.length; i++) {
        let start = s1[i]
        let end = s2[i]

        const tween = new TWEEN.Tween(start) 
        .to(end, 1000)
        .easing(TWEEN.Easing.Quadratic.Out) 
        .onUpdate((e) => { 
          debugger
          //@ts-ignore
          span.innerText = i + "     " + start.join()
        })
        .start();
      }
    }, 1000)
    
    
  })
}) 